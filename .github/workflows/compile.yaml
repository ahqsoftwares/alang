name: ALang Builder

on:
  push:
    paths-ignore:
      - 'docs/**'
    branches:
      - master

jobs:
  create_release:
    name: Make draft release
    outputs:
      upload_url: ${{ steps.create-release.outputs.result }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3

      - name: Install Packages
        run: npm install .
        working-directory: js

      - name: Create Release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const {
              body,
              version
            } = await require("./js/index.js");

            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `lang-${version}`,
              name: `Alang v${version}`,
              body,
              draft: true,
              prerelease: false
            })
            return data["upload_url"]

  build_and_test:
    needs: create_release
    strategy:
      fail-fast: true
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    runs-on: ${{ matrix.os }}

    name: Build & Test (${{ matrix.os }})

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Nodejs
        uses: actions/setup-node@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build Lang
        run: cargo build --release

      - name: Build Cli
        run: cargo build --release
        working-directory: cli

      - name: Build Compiler
        run: cargo build --release
        working-directory: compiler

      - name: Build Interpreter
        run: cargo build --release
        working-directory: interpreter

      - name: Build Packager
        run: cargo build --release
        working-directory: packager

      - name: Build Packloader
        run: cargo build --release
        working-directory: packloader

      - name: Install Packages
        run: npm install .
        working-directory: js

      - name: Get Assets
        id: assets
        uses: actions/github-script@v6
        env:
          OS: ${{ matrix.os }}
        with:
          script: |
            const {
              installer,
              tools,
              name
            } = await require("./js/zip.js");

            return {installer, tools, toolsName: name.tools, installerName: name.installer}

      - name: Archive Release
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: 'zip'
          filename: 'debug.zip'
          path: '.'
      
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}.zip
          path: debug.zip

      - name: Upload 
        uses: actions/github-script@v6
        env:
          toolsPath: ${{ steps.assets.outputs.result.tools }}
          installerPath: ${{ steps.assets.outputs.result.installer }}
          toolsName: ${{ steps.assets.outputs.result.toolsName }}
          installerName: ${{ steps.assets.outputs.result.installerName }}
          uurl: ${{ needs.create_release.outputs.upload_url }}
        with:
          script: |
            const fs = require("fs");
            const uploadUrl = process.env.uurl;
            const assetPaths = [
              [process.env.toolsPath, process.env.toolsName, "application/zip"],
              [process.env.installerPath, , process.env.installerName, "application/octet-stream"]
            ];
    
            for (let i = 0; i < assetPaths.length; i++) {
              const [assetPath, assetName, assetContentType] = assetPaths[i];

              const contentLength = filePath => fs.statSync(filePath).size;
              const headers = { 'content-type': assetContentType, 'content-length': contentLength(assetPath) };

              const uploadAssetResponse = await github.repos.uploadReleaseAsset({
                url: uploadUrl,
                headers,
                name: assetName,
                file: fs.readFileSync(assetPath)
              }); 
              console.log(`âœ… Uploaded ${assetName}`);
            }

      

      